AWSTemplateFormatVersion: '2010-09-09'
Description: "Update Pluto with published information from CAPI"
Parameters:
  CapiStreamArn:
    Type: String
    Description: Arn of the Crier kinesis stream to attach to
  CapiStreamName:
    Type: String
    Description: Name of the Crier kinesis stream to attach to
  CapiRole:
    Type: String
    Description: ARN of the role to assume to read from the kinesis stream
  Mode:
    Type: String
    AllowedValues:
      - preview
      - live
    Description: Which CAPI mode to listen to
  LoggingStreamName:
    Description: Name of a Kinesis stream to send logs to
    Type: String
  PlutoHost:
    Type: String
    Description: Host or loadbalancer where pluto can be reached
  PlutoSharedSecret:
    Type: String
    Description: Shared secret to match the configured one in pluto-deliverables
    NoEcho: true
  ExtraDNS:
    Type: String
    Description: Allows an extra DNS server address to be inserted into the resolv.conf file
  App:
    Type: String
    Description: Application identifier for RiffRaff
    Default: launchdetector
  Stack:
    Type: String
    Description: Stack identifier for RiffRaff
    Default: multimedia
  Stage:
    Type: String
    AllowedValues:
      - CODE
      - DEV
      - PROD
    Description: Deployment stage
  AmiId:
    Type: String
    Description: ID of the base image to build instances from.  Build this with Amigo.
  OfficeIpRange:
    Type: String
    Description: CIDR block of ip addresses to be allowed SSH access
  InstanceType:
    Type: String
    Description: What type of instance to launch
    AllowedValues:
    - t3.nano
    - t3.micro
    - t3.small
    Default: t3.nano
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Root access keypair
  VPCID:
    Description: Virtual Private Cloud to deploy into
    Type: AWS::EC2::VPC::Id
  DeploySubnets:
    Description: Subnets to deploy into.  These should be the same as where the database lives.
    Type: List<AWS::EC2::Subnet::Id>
  CapiApiKey:
    Description: API key for Content API. Contact the Content API team to get or update this.
    Type: String
    NoEcho: true
Resources:
  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load-balancer security group for launchdetector
      SecurityGroupIngress:
        - CidrIp: !Ref OfficeIpRange
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
      VpcId: !Ref VPCID
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: true
      HealthCheck:
        HealthyThreshold: "3"
        Interval: "10"
        Target: "HTTP:9000/is-online"
        Timeout: "3"
        UnhealthyThreshold: "2"
      Listeners:
        - InstancePort: "9000"
          InstanceProtocol: "http"
          LoadBalancerPort: "80"
          Protocol: "http"
      Scheme: internal
      SecurityGroups:
      - !GetAtt LoadBalancerSG.GroupId
      Subnets: !Ref DeploySubnets
      Tags:
      - Key: App
        Value: !Ref App
      - Key: Stack
        Value: !Ref Stack
      - Key: Stage
        Value: !Ref Stage
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: CrierDynamo
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action: "dynamodb:*"
            Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CapiStreamName}_${App}-${Mode}-${Stage}
      - PolicyName: KinesisLogging
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
              - kinesis:Describe*
              - kinesis:List*
              - kinesis:PutRecord
              - kinesis:PutRecords
            Resource:
              - !Sub arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${LoggingStreamName}
      - PolicyName: DataAccess
        PolicyDocument:
           Version: 2012-10-17
           Statement:
             Effect: Allow
             Action:
             - dynamodb:DescribeTable
             - dynamodb:DeleteItem
             - dynamodb:GetItem
             - dynamodb:GetRecords
             - dynamodb:PutItem
             - dynamodb:Query
             - dynamodb:UpdateItem
             Resource: !GetAtt UnattachedAtomsTable.Arn
      - PolicyName: DeployablesAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
             - s3:ListBucket
             - s3:GetObject
            Resource:
            - arn:aws:s3:::gnm-multimedia-rr-deployables
            - arn:aws:s3:::gnm-multimedia-rr-deployables/*
            - arn:aws:s3:::gnm-multimedia-deployables
            - arn:aws:s3:::gnm-multimedia-deployables/newrelic*
      - PolicyName: RoleAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
            - sts:AssumeRole
            Resource: !Ref CapiRole
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref InstanceRole
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Instance security group for launchdetector
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt LoadBalancerSG.GroupId
          FromPort: 9000
          ToPort: 9000
          IpProtocol: tcp
        - CidrIp: !Ref OfficeIpRange
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
  UnattachedAtomsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: AtomID
          AttributeType: S
        - AttributeName: userEmail
          AttributeType: S
        - AttributeName: dateCreated
          AttributeType: S
        - AttributeName: dummy
          AttributeType: S
      KeySchema:
        - AttributeName: AtomID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: dateIndex
          KeySchema:
          - AttributeName: dummy
            KeyType: HASH
          - AttributeName: dateCreated
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            WriteCapacityUnits: 1
            ReadCapacityUnits: 1
        - IndexName: UserIndex
          KeySchema:
            - AttributeName: userEmail
              KeyType: HASH
            - AttributeName: dateCreated
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            WriteCapacityUnits: 1
            ReadCapacityUnits: 1
      ProvisionedThroughput:
        WriteCapacityUnits: 1
        ReadCapacityUnits: 1
      TableName: !Sub LaunchDetectorUnattachedAtoms-${Stage}-v9
      Tags:
        - Key: App
          Value: !Sub ${App}
        - Key: Stack
          Value: !Sub ${Stack}
        - Key: Stage
          Value: !Sub ${Stage}
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair
      SecurityGroups:
      - !Ref InstanceSecurityGroup
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash -e

          mkdir -p /tmp/install

          aws s3 cp s3://gnm-multimedia-rr-deployables/${Stack}/${Stage}/${App}/multimedia-launchdetector-v3_3.0_all.deb /tmp/install

          declare -x MOST_RECENT_PACKAGE=`ls -Frt /tmp/install/*.deb | grep "[^/]$" | tail -n 1`
          echo Going to install $MOST_RECENT_PACKAGE
          dpkg --install "${!MOST_RECENT_PACKAGE}"

          echo --------------------------------------
          echo Updating DNS resolvers...
          echo --------------------------------------
          if [ "${ExtraDNS}" != "" ]; then
            mv /etc/resolv.conf /etc/resolv.conf.old
            echo "nameserver ${ExtraDNS}" > /etc/resolv.conf
            cat /etc/resolv.conf.old >> /etc/resolv.conf
          fi

          echo --------------------------------------
          echo Deploying production app config...
          echo --------------------------------------
          mkdir -p /usr/share/multimedia-launchdetector-v3/conf
          cat > /usr/share/multimedia-launchdetector-v3/conf/application.conf << EOF
          capi_stream_name = "${CapiStreamName}"
          capi_role_name = "${CapiRole}"
          capi_mode = "${Mode}"
          capi_api_key = "${CapiApiKey}"

          app_name = "${App}"
          app_stack = "${Stack}"
          app_stage = "${Stage}"

          region = "${AWS::Region}"

          pluto_host = "${PlutoHost}"
          pluto_port = 443
          pluto_shared_secret = "${PlutoSharedSecret}"
          pluto_proto = "https"

          unattached_atoms_table = ${UnattachedAtomsTable}

          akka {
            http.client.connecting-timeout="1 second"
            log-dead-letters=0
            log-dead-letters-during-shutdown=off
            loggers = ["akka.event.slf4j.Slf4jLogger"]
            loglevel = "DEBUG"
            logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
          }

          EOF

          aws s3 cp s3://gnm-multimedia-rr-deployables/gnm_certs.jks /usr/share/multimedia-launchdetector-v3/conf/gnm_certs.jks

          cat > /etc/default/multimedia-launchdetector-v3 << EOF
          JAVA_OPTS="-XX:+ExitOnOutOfMemoryError -Dconfig.file=/usr/share/multimedia-launchdetector-v3/conf/application.conf -Dlogback.configurationFile=/usr/share/multimedia-launchdetector-v3/conf/logback.xml -Dlaunchdetector.extraKeyStores=/usr/share/multimedia-launchdetector-v3/conf/gnm_certs.jks"
          EOF

          echo --------------------------------------
          echo Deploying production logging config...
          echo --------------------------------------

          cat > /usr/share/multimedia-launchdetector-v3/conf/logback-deployment.xml << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <configuration>

          <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
          <encoder>
          <Pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</Pattern>
          </encoder>
          </appender>

          <appender name="KINESIS" class="com.gu.logback.appender.kinesis.KinesisAppender">
          <bufferSize>1000</bufferSize>
          <threadCount>20</threadCount>
          <region>{region}</region>
          <maxRetries>3</maxRetries>
          <shutdownTimeout>30</shutdownTimeout>
          <streamName>{logging-stream}</streamName>
          <encoding>UTF-8</encoding>
          <layout class="ch.qos.logback.classic.PatternLayout">
          <pattern>%date{"yyyy-MM-dd'T'HH:mm:ss,SSSXXX"} |{app}|{stage}| [%level] from %logger in %thread - %message%n%xException</pattern>
          </layout>
          </appender>

          <!-- our loggers -->
          <logger name="MainClass$" level="INFO"/>
          <logger name="Healthcheck$" level="INFO"/>
          <logger name="ShutdownHandler" level="INFO"/>
          <logger name="actors.PlutoUpdaterActor" level="INFO"/>

          <!-- library loggers -->
          <logger name="akka.event.EventStream" level="INFO"/>
          <logger name="com.amazonaws.metrics.AwsSdkMetrics" level="INFO"/>
          <logger name="akka.io.TcpListener" level="INFO"/>
          <logger name="c.a.s.k.c.proxies.KinesisProxy" level="WARN"/>
          <logger name="c.a.s.k.leases.impl.LeaseCoordinator" level="INFO"/>
          <logger name="c.a.s.k.c.lib.worker.Worker" level="WARN"/>
          <logger name="c.a.s.k.leases.impl.LeaseCoordinator" level="INFO"/>
          <root level="WARN">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="KINESIS"/>
          </root>
          </configuration>
          EOF

          cat /usr/share/multimedia-launchdetector-v3/conf/logback-deployment.xml | sed s/{region}/${AWS::Region}/ > /tmp/logback.xml
          cat /tmp/logback.xml | sed s/{app}/${App}/ > /tmp/logback.xml.2
          cat /tmp/logback.xml.2 | sed s/{stack}/${Stack}/ > /tmp/logback.xml.3
          cat /tmp/logback.xml.3 | sed s/{stage}/${Stage}/ > /tmp/logback.xml.4
          cat /tmp/logback.xml.4 | sed s/{logging-stream}/${LoggingStreamName}/ > /usr/share/multimedia-launchdetector-v3/conf/logback.xml

          systemctl restart multimedia-launchdetector-v3
          systemctl enable multimedia-launchdetector-v3

  AutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: "1"
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref LaunchConfig
      LoadBalancerNames:
      - !Ref LoadBalancer
      MaxSize: "8"
      MinSize: "1"
      Tags:
      - Key: App
        Value: !Ref App
        PropagateAtLaunch: true
      - Key: Stack
        Value: !Ref Stack
        PropagateAtLaunch: true
      - Key: Stage
        Value: !Ref Stage
        PropagateAtLaunch: true
      VPCZoneIdentifier: !Ref DeploySubnets
Outputs:
  LoadBalancerAddress:
    Value: !GetAtt LoadBalancer.DNSName